# Generated by Django 4.2.7 on 2025-08-01 17:09

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ('leads', '0013_auto_20250801_0341'),
    ]

    operations = [
        migrations.CreateModel(
            name='AgentPerformance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('leads_assigned', models.PositiveIntegerField(default=0)),
                ('leads_contacted', models.PositiveIntegerField(default=0)),
                ('leads_converted', models.PositiveIntegerField(default=0)),
                ('total_interactions', models.PositiveIntegerField(default=0)),
                ('average_response_time_hours', models.FloatField(default=0.0)),
                ('conversion_rate', models.FloatField(default=0.0)),
                ('contact_rate', models.FloatField(default=0.0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalLead',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='First name can only contain letters and spaces.', regex='^[a-zA-Z\\s]+$')])),
                ('last_name', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator(message='Last name can only contain letters and spaces.', regex='^[a-zA-Z\\s]+$')])),
                ('age', models.PositiveIntegerField(help_text='Age of the lead', validators=[django.core.validators.MinValueValidator(0, 'Age cannot be negative.'), django.core.validators.MaxValueValidator(150, 'Age cannot exceed 150.')])),
                ('email', models.EmailField(db_index=True, help_text='Primary email address', max_length=254)),
                ('phone_number', models.CharField(help_text='Phone number in international format', max_length=20, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('description', models.TextField(blank=True, help_text='Additional notes about the lead')),
                ('source', models.CharField(blank=True, help_text='Source of the lead (e.g., website, referral, cold call)', max_length=100)),
                ('lead_score', models.FloatField(default=0.0, help_text='Machine learning-based lead score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('engagement_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='low', help_text='Engagement level based on interactions', max_length=20)),
                ('follow_up_date', models.DateTimeField(blank=True, help_text='Scheduled follow-up date', null=True)),
                ('follow_up_notes', models.TextField(blank=True, help_text='Notes for the follow-up')),
                ('is_snoozed', models.BooleanField(default=False, help_text='Whether the lead is currently snoozed')),
                ('snooze_until', models.DateTimeField(blank=True, help_text='Date until which the lead is snoozed', null=True)),
                ('interaction_count', models.PositiveIntegerField(default=0, help_text='Number of interactions with this lead')),
                ('last_interaction_type', models.CharField(blank=True, help_text='Type of last interaction (call, email, meeting, etc.)', max_length=50)),
                ('date_added', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('last_contacted', models.DateTimeField(blank=True, help_text='Date when the lead was last contacted', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
            ],
            options={
                'verbose_name': 'historical Lead',
                'verbose_name_plural': 'historical Leads',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='LeadInteraction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interaction_type', models.CharField(choices=[('call', 'Phone Call'), ('email', 'Email'), ('meeting', 'Meeting'), ('text', 'Text Message'), ('social', 'Social Media'), ('other', 'Other')], max_length=50)),
                ('notes', models.TextField(blank=True)),
                ('duration_minutes', models.PositiveIntegerField(blank=True, help_text='Duration of interaction in minutes', null=True)),
                ('outcome', models.CharField(choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative'), ('no_response', 'No Response')], default='neutral', max_length=50)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LeadSource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='lead',
            name='engagement_level',
            field=models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='low', help_text='Engagement level based on interactions', max_length=20),
        ),
        migrations.AddField(
            model_name='lead',
            name='follow_up_date',
            field=models.DateTimeField(blank=True, help_text='Scheduled follow-up date', null=True),
        ),
        migrations.AddField(
            model_name='lead',
            name='follow_up_notes',
            field=models.TextField(blank=True, help_text='Notes for the follow-up'),
        ),
        migrations.AddField(
            model_name='lead',
            name='interaction_count',
            field=models.PositiveIntegerField(default=0, help_text='Number of interactions with this lead'),
        ),
        migrations.AddField(
            model_name='lead',
            name='is_snoozed',
            field=models.BooleanField(default=False, help_text='Whether the lead is currently snoozed'),
        ),
        migrations.AddField(
            model_name='lead',
            name='last_interaction_type',
            field=models.CharField(blank=True, help_text='Type of last interaction (call, email, meeting, etc.)', max_length=50),
        ),
        migrations.AddField(
            model_name='lead',
            name='lead_score',
            field=models.FloatField(default=0.0, help_text='Machine learning-based lead score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)]),
        ),
        migrations.AddField(
            model_name='lead',
            name='snooze_until',
            field=models.DateTimeField(blank=True, help_text='Date until which the lead is snoozed', null=True),
        ),
        migrations.AlterField(
            model_name='agent',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='category',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='lead',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='user',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['lead_score'], name='leads_lead_lead_sc_66efbc_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['follow_up_date'], name='leads_lead_follow__064bf5_idx'),
        ),
        migrations.AddIndex(
            model_name='lead',
            index=models.Index(fields=['is_snoozed'], name='leads_lead_is_snoo_d36f1b_idx'),
        ),
        migrations.AddField(
            model_name='leadsource',
            name='organisation',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lead_sources', to='leads.userprofile'),
        ),
        migrations.AddField(
            model_name='leadinteraction',
            name='agent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lead_interactions', to='leads.agent'),
        ),
        migrations.AddField(
            model_name='leadinteraction',
            name='lead',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interactions', to='leads.lead'),
        ),
        migrations.AddField(
            model_name='historicallead',
            name='agent',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='leads.agent'),
        ),
        migrations.AddField(
            model_name='historicallead',
            name='category',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='leads.category'),
        ),
        migrations.AddField(
            model_name='historicallead',
            name='history_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='historicallead',
            name='organisation',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='leads.userprofile'),
        ),
        migrations.AddField(
            model_name='agentperformance',
            name='agent',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_records', to='leads.agent'),
        ),
        migrations.AlterUniqueTogether(
            name='leadsource',
            unique_together={('organisation', 'name')},
        ),
        migrations.AddIndex(
            model_name='leadinteraction',
            index=models.Index(fields=['lead', 'created_at'], name='leads_leadi_lead_id_dc37ee_idx'),
        ),
        migrations.AddIndex(
            model_name='leadinteraction',
            index=models.Index(fields=['agent', 'created_at'], name='leads_leadi_agent_i_afa823_idx'),
        ),
        migrations.AddIndex(
            model_name='leadinteraction',
            index=models.Index(fields=['interaction_type'], name='leads_leadi_interac_5f0ad1_idx'),
        ),
        migrations.AddIndex(
            model_name='agentperformance',
            index=models.Index(fields=['agent', 'date'], name='leads_agent_agent_i_972f57_idx'),
        ),
        migrations.AddIndex(
            model_name='agentperformance',
            index=models.Index(fields=['conversion_rate'], name='leads_agent_convers_d6bfcf_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='agentperformance',
            unique_together={('agent', 'date')},
        ),
    ]
